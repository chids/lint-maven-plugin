import java.io.*;
import org.codehaus.plexus.util.FileUtils;

class ValidationException extends Exception {

}

String readBuildLog() {
    File file = new File( basedir, "build.log" );
    String buf = FileUtils.fileRead( file, "UTF-8" );
    return buf;
}

void checkForWarnings(buf) {
    // Start checking for warnings where we start running the plugin.
    int startIndex = buf.indexOf("--- lint-maven-plugin:");
    while (startIndex >= 0) {
        int warnIndex = buf.indexOf("[WARNING]", startIndex);
        if ( warnIndex >= 0 )
        {
            int endOfLine = buf.indexOf('\n', warnIndex);
            // If there was no end of line found, use the end of the buffer instead.
            if (endOfLine < 0) {
                endOfLine = buf.length();
            }
            String warning = buf.substring(warnIndex, endOfLine);

            System.err.println("Unexpected warnings were logged: " + warning);
            throw new ValidationException();
        } else {
            startIndex = warnIndex;
        }
    }
}

void validateExpectedLintErrors(buf, expectedErrors) {
	boolean passed = true;
	for (String expectedError : expectedErrors) {
	    if ( buf.indexOf( expectedError ) < 0 )
	    {
	        System.err.println( "Did not find expected violation: " + expectedError );
	        passed = false;
	    }
    }
    if (!passed) {
        throw new ValidationException();
    }
}

void validateExpectedOutput(buf, expectedOutputs) {
	boolean passed = true;
	for (String expectedOutput : expectedOutputs) {
	    if ( buf.indexOf( expectedOutput ) < 0 )
	    {
	        System.err.println( "Did not find expected output: " + expectedOutput );
	        passed = false;
	    }
    }
    if (!passed) {
        throw new ValidationException();
    }
}

void validateNoLintErrors(buf) {
    if ( buf.indexOf( "[LINT] Completed with no violations" ) < 0 )
    {
        System.err.println( "Did not complete without violations." );
        throw new ValidationException();
    }
}